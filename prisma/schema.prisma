// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  nickname     String
  image        String?
  password     String
  articles     Article[]
  products     Product[]
  comments     Comment[]
  likesArticle LikeArticle[]
  likesProduct LikeProduct[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  notifications Notification[]
}

model Article {
  id             Int           @id @default(autoincrement())
  title          String
  content        String
  image          String?
  ArticleComment Comment[]
  likesArticle   LikeArticle[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  User           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
}

model Product {
  id             Int           @id @default(autoincrement())
  name           String
  description    String
  price          Int
  tags           String[]
  images         String[]
  ProductComment Comment[]
  likesProduct   LikeProduct[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  User           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model LikeArticle {
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  createdAt DateTime @default(now())

  @@id([userId, articleId])
}

model LikeProduct {
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())

  @@id([userId, productId])
}

model Notification {
  id        Int              @id @default(autoincrement())
  read      Boolean          @default(false)
  type      NotificationType
  payload   Json
  createdAt DateTime         @default(now())
  User      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

enum NotificationType {
  NEW_COMMENT
  PRICE_CHANGE
}
